env = Environment(CXX='clang++', CCFLAGS=['-std=c++17', '-Wall'])

# asmjit = env.StaticLibrary('asmjit', [ 
#     Glob('../asmjit/src/asmjit/*.cpp'),
#     Glob('../asmjit/src/asmjit/arm/*.cpp'),
#     Glob('../asmjit/src/asmjit/core/*.cpp'),
#     Glob('../asmjit/src/asmjit/x86/*.cpp')
# ])
# blend2d = env.StaticLibrary('blend2d', [
#     Glob('../blend2d/src/blend2d/*.cpp'), 
#     Glob('../blend2d/src/blend2d/codec/*.cpp'),
#     Glob('../blend2d/src/blend2d/compression/*.cpp'), 
#     Glob('../blend2d/src/blend2d/opentype/*.cpp'), 
#     Glob('../blend2d/src/blend2d/pipeline/*.cpp'), 
#     Glob('../blend2d/src/blend2d/pixelops/*.cpp'), 
#     Glob('../blend2d/src/blend2d/raster/*.cpp'),
#     Glob('../blend2d/src/blend2d/simd/*.cpp'), 
#     Glob('../blend2d/src/blend2d/support/*.cpp'), 
#     Glob('../blend2d/src/blend2d/tables/*.cpp'), 
#     Glob('../blend2d/src/blend2d/threading/*.cpp'), 
#     Glob('../blend2d/src/blend2d/unicode/*.cpp'), 
#     Glob('../blend2d/src/blend2d/pipeline/jit/*.cpp'), 
#     Glob('../blend2d/src/blend2d/pipeline/reference/*.cpp')
# ])

# env.Install('dist', [asmjit, blend2d])

source = [
    Glob('../asmjit/src/asmjit/*.cpp'),
    Glob('../asmjit/src/asmjit/arm/*.cpp'),
    Glob('../asmjit/src/asmjit/core/*.cpp'),
    Glob('../asmjit/src/asmjit/x86/*.cpp'),

    Glob('../blend2d/src/blend2d/*.cpp'), 
    Glob('../blend2d/src/blend2d/codec/*.cpp'),
    Glob('../blend2d/src/blend2d/compression/*.cpp'), 
    Glob('../blend2d/src/blend2d/opentype/*.cpp'), 
    Glob('../blend2d/src/blend2d/pipeline/*.cpp'), 
    Glob('../blend2d/src/blend2d/pixelops/*.cpp'), 
    Glob('../blend2d/src/blend2d/raster/*.cpp'),
    Glob('../blend2d/src/blend2d/simd/*.cpp'), 
    Glob('../blend2d/src/blend2d/support/*.cpp'), 
    Glob('../blend2d/src/blend2d/tables/*.cpp'), 
    Glob('../blend2d/src/blend2d/threading/*.cpp'), 
    Glob('../blend2d/src/blend2d/unicode/*.cpp'), 
    Glob('../blend2d/src/blend2d/pipeline/jit/*.cpp'), 
    Glob('../blend2d/src/blend2d/pipeline/reference/*.cpp'),

    "../ArabicString/ArabicString.cpp",

    Glob("../native/src/*.cpp"),
    # asmjit,
    # blend2d
]

env.Append(CPPPATH=["../asmjit/src", '../blend2d/src', "../native/include", "../ArabicString"])
env.Append(LIBPATH=['.'])
# env.Append(LIBS=['asmjit', 'blend2d'])
# env.Program('main', source)

env.SharedLibrary('main', source)